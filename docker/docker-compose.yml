networks:
  batch_processing_network:
    driver: bridge
    name: batch_processing_network

services:
  
  ## NIFI
  nifi:
    container_name: nifi-ingestion
    build: ./nifi/nifi-ingestion/
    hostname: nifi-ingestion
    ports:
      - '8443:8443'
    networks:
      - batch_processing_network
    tty: true
    environment:
      - SINGLE_USER_CREDENTIALS_USERNAME=${NIFI_USERNAME}
      - SINGLE_USER_CREDENTIALS_PASSWORD=${NIFI_PASSWORD}
      - NIFI_HOME=/opt/nifi/nifi-current
      - NIFI_SENSITIVE_PROPS_KEY=${NIFI_SENSITIVE_PROPS_KEY}
    volumes:
      - ./nifi/nifi-ingestion/dataset:/opt/nifi/nifi-current/dataset
    depends_on: 
      - hdfs-master

  ## HDFS
  hdfs-master :
    container_name: hdfs-master
    working_dir: /scripts
    hostname: master
    image: matnar/hadoop
    ports:
      - "54310:54310"
    networks:
      - batch_processing_network
    tty: true
    volumes:
    - ./hadoop:/scripts
    depends_on:
      - slave1
    
  slave1 :
    container_name: hdfs-worker1
    image: matnar/hadoop
    ports:
      - "9864:9864"
    networks:
      - batch_processing_network
    tty: true
    depends_on:
      - spark-master

  # slave2:
  #   container_name: hdfs-worker2
  #   image: matnar/hadoop
  #   ports:
  #     - "9863:9864"
  #   networks:
  #     - batch_processing_network
  #   tty: true
  #   depends_on:
  #     - spark-master

  # slave3:
  #   container_name: hdfs-worker3
  #   image: matnar/hadoop
  #   ports:
  #     - "9862:9864"
  #   networks:
  #     - batch_processing_network
  #   tty: true
  #   depends_on:
  #     - spark-master

  ## SPARK
  spark-master:
    container_name: spark-master
    image: bitnami/spark
    environment:
      - SPARK_MODE=master
    networks:
      - batch_processing_network
    hostname: spark-master
    ports:
      - 8080:8080
      - 7077:7077
    tty: true
    depends_on:
      - spark-worker

  spark-worker:
    image: bitnami/spark
    networks:
      - batch_processing_network
    environment:
      - SPARK_MODE=worker
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
    tty: true

  ## InfluxDB    
  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "8086:8086"
    networks:
      - batch_processing_network
    volumes:
      - influxdb-storage:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUX_DB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_DB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=BatchProcessing
      - DOCKER_INFLUXDB_INIT_BUCKET=sparkresults
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUX_DB_TOKEN}
  
  ## GRAFANA
  grafana:
    container_name: grafana
    build: ./grafana/
    image: custom-grafana
    ports:
      - "3000:3000"
    networks:
      - batch_processing_network
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_RENDERING_SERVER_URL=http://grafana-renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    depends_on:
      - renderer

  renderer:
    image: grafana/grafana-image-renderer:latest
    container_name: grafana-renderer
    ports:
      - "8081:8081"
    networks:
      - batch_processing_network

volumes:
  grafana-storage:
  influxdb-storage:
